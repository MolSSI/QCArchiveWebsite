# LNN: This content maps to the /projects page in content
# LNN: I had to make a unique layouts/projects.html from a copy of the theme one because
# the theme one was a literal forum for contact and applying, it was not usable for our
# purposes, so I re-worked it. The YAML is now a bit confusing and can be cleaned up later,
# but it works.

# promo video
promo:
  enable : false
  title : "Who we're looking for"
  content : "Praesent sapien massa, convallis a pellentesque nec, egestas non nisi. eget tortor risus. Vivamus magna justo, lacinia eget consectetur sed,convallis at tellus. Vivamus suscipit tortor eget felis porttitor volutpat.Curabitur arcu erat, accumsan id imperdiet et, porttitor at sem. Praesent sapien massa, convallis"
  videoThumb : "images/thumbs/promo-video-thumbnail.webp"
  videoThumbAlt : "images/thumbs/promo-video-thumbnail.jpg"
  videoURL : "https://www.youtube.com/embed/g3-VxLQO7do?autoplay=1"

# gallary
gallary:
  enable : false
  gallaryItem:
    - image : "images/gallery/gallery-01.webp"
      imageAlt : "images/gallery/gallery-01.jpg"

    - image : "images/gallery/gallery-02.webp"
      imageAlt : "images/gallery/gallery-02.jpg"

    - image : "images/gallery/gallery-03.webp"
      imageAlt : "images/gallery/gallery-03.jpg"

# funfacts
funfacts:
  enable : false
  title : "Some amenities for you to enjoy"
  funfactItem:
    - icon : "tf-ion-ios-stopwatch-outline"
      title : "Flexible hours"
      content : "Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Donec rutrum congue leo eget malesuada."

    - icon : "tf-ion-ios-wineglass"
      title : "Free Snacks & Drinks"
      content : "Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Donec rutrum congue leo eget malesuada."

    - icon : "tf-ion-ios-game-controller-b-outline"
      title : "Gaming"
      content : "Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Donec rutrum congue leo eget malesuada."

    - icon : "tf-ion-ios-flask-outline"
      title : "4 Working Days"
      content : "Mauris blandit aliquet elit, eget tincidunt nibh pulvinar a. Donec rutrum congue leo eget malesuada."

# job list
job:
  enable : true
  title : "QCArchive Ecosystem"
  jobList:
    # job item
    - title : "QCPortal"
      location : "Client Side entry point to QCFractal"  #Sub item
      details : "Client side portal access to either MolSSI's permanent database (QCFractal), or a private one of your own"
      experienceList:
        - experience : "Access to the QCFractal database of computations"
        - experience : "Access to the QCFractal compute backends for running new calculations"
        - experience : "Requires no hardware beyond internet"
        - experience : "Configurable to point a non-MolSSI QCFractal instances"
      formAction : "#"
      # LNN: All of these were added on my layouts/projects/list.html
      docs : "http://docs.qcarchive.molssi.org/projects/qcportal/en/latest/"
      github: "https://github.com/MolSSI/QCPortal"
      pypi: "https://pypi.org/project/qcportal/"
      conda: "https://anaconda.org/conda-forge/qcportal"

    # job item
    - title : "QCFractal"
      location : "Main database and compute job generator"  #Sub item
      details : "Provides the primary interface to the database with the stored calculation results.
                 QCPortal clients connect to the Fractal Server and request calculations, or add new
                 constructs such as data sets or molecules before requesting calculations. Fractal then
                 creates a flat job list which distribution managers can pull from and send to compute
                 hardware. All job connectivity logic is handled through Fractal, so any number of managers
                 connected to any number of compute backends can handle jobs."
      experienceList:
        - experience : "Manage compute data base and check for duplicates"
        - experience : "Structures data in format with the QCSchema"
        - experience : "Creates compute jobs for missing calculations and provides them to consumer managers"
        - experience : "Persistent public database maintained by MolSSI"
        - experience : "You can create and host your own local instance which does not have to connect to the central MolSSI one to work"
      formAction : "#"
      # LNN: All of these were added on my layouts/projects/list.html
      docs : "http://docs.qcarchive.molssi.org/projects/qcfractal/en/latest/"
      github: "https://github.com/MolSSI/QCFractal"
      pypi: "https://pypi.org/project/qcfractal/"
      conda: "https://anaconda.org/conda-forge/qcfractal"

    - title : "QCEngine"
      location : "Quantum chemistry program executor and I/O standard"  #Sub item
      details : "Hardware agnostic quantum chemistry program executor and I/O standard (via common interface and QCSchema)."
      experienceList:
        - experience : "Common execution program deployed to compute hardware through QCFractal and distribution manager"
        - experience : "Interfaces with various quantum chemistry compute programs (the applications doing the heavy lifting)"
        - experience : "Relatively hardware agnostic with minor configuration, can be left alone for the most part and will consume what its given from the manager"
        - experience : "Consumes and generates QCSchema specification for regular input and output via QCElemental"
      formAction : "#"
      # LNN: All of these were added on my layouts/projects/list.html
      docs : "http://docs.qcarchive.molssi.org/projects/qcengine/en/latest/"
      github: "https://github.com/MolSSI/QCEngine"
      pypi: "https://pypi.org/project/qcengine/"
      conda: "https://anaconda.org/conda-forge/qcengine"

    - title: "QCElemental and QCSchema"
      location: "A periodic table, version controlled physical constants, and molecule parsing for quantum chemistry."  #Sub item
      details: "This application serves as the common area for all other aspects of QCArchive. Every project pulls from this so
                models, data, constants, and versions are identical over the several programs which rely on the QCSchema
                specification and the several (de)serialization steps taken through the QCFractal pipeline. Unit conversions
                are also handled here through Pint and through versioned quantum chemistry measured constants."
      experienceList:
        - experience: "Common library from which all other projects draw"
        - experience: "Versioned units and periodic table"
        - experience: "Draws and validates against the QCSchema JSON specification"
        - experience: "Will likely be the future home of QCSchema's JSON file to validate against (TBD)"
      formAction: "#"
      # LNN: All of these were added on my layouts/projects/list.html
      docs: "http://docs.qcarchive.molssi.org/projects/qcelemental/en/latest/"
      github: "https://github.com/MolSSI/QCElemental"
      pypi: "https://pypi.org/project/qcelemental/"
      conda: "https://anaconda.org/conda-forge/qcelemental"
